name: Run Scratch Org Flow
description: 'Execute a named CumulusCI flow'
inputs:
  cumulusci-version:
    description: 'version of CumulusCI to install'
    required: false
  sfdx-version:
    description: 'version of SFDX to install'
    required: false
  dev-hub-auth-url:
    description: 'SFDX auth URL for the Dev Hub'
    required: true
  org-name:
    description: 'Name of the scratch org or persistent org config to use'
    required: true
  flow-name:
    description: 'Name of the Cumulus flow to execute'
    required: true
  flow-options:
    description: 'Options for the Cumulus flow to include'
    required: false
  commit-status-name:
    description: 'Name of an optional extra commit status to set from build results'
    required: false
    default:
  commit-status-regex:
    description: 'Regex to apply to flow log to locate commit status value'
    required: false
    default:
  commit-status-description-prefix:
    description: 'Value to prefix before regex result in commit status value'
    required: false
    default:
  debug:
    description: 'Display debug logs during Flow Execution'
    required: false
    default: false
    type: boolean
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Set Up CumulusCI
      uses: nimba-actions/setup-cumulus@v1
      with:
        cumulusci-version: '${{ inputs.cumulusci-version }}'
        sfdx-version: '${{ inputs.sfdx-version }}'
    - name: Authorize Dev Hub
      uses: nimba-actions/authorize-org@v1
      with:
        auth-url: '${{ inputs.dev-hub-auth-url }}'
        org-name: dev-hub
        dev-hub: true
    - name: Run Flow
      uses: nimba-actions/run-flow@main
      with:
        org-name: '${{ inputs.org-name }}'
        debug: '${{ inputs.debug }}'
        flow-name: '${{ inputs.flow-name }}'
        flow-options: '${{ inputs.flow-options }}'
    - name: Set Commit Status
      if: ${{ inputs.commit-status-regex && inputs.commit-status-name }}
      env:
        GITHUB_TOKEN: '${{ github.token }}'
        COMMIT_STATUS_REGEX: '${{ inputs.commit-status-regex }}'
        COMMIT_STATUS_DESCRIPTION_PREFIX: '${{ inputs.commit-status-description-prefix }}'
        COMMIT_STATUS_NAME: '${{ inputs.commit-status-name }}'
        GITHUB_REPOSITORY: '${{ github.repository }}'
        GITHUB_SHA: '${{ github.sha }}'
      run: |
        echo "Using commit-status-regex: $COMMIT_STATUS_REGEX"
        STATUS=$(grep -oE "$COMMIT_STATUS_REGEX" cumulusci-flow.log | tail -1)
        echo "Extracted STATUS: '$STATUS'"
        
        # Remove the parentheses
        STATUS=${STATUS:1:-1}
        echo "Storing version_id in Commit Status: '$STATUS'"
        
        if [ -z "$STATUS" ]; then
          echo "Error: Package version ID not found in cumulusci-flow.log"
          exit 1
        fi
        gh api \
          --method POST \
          -H "Accept: application/vnd.github.v3+json" \
          "/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA" \
          -f state='success' \
          -f description="$COMMIT_STATUS_DESCRIPTION_PREFIX$STATUS" \
          -f context="$COMMIT_STATUS_NAME"
      shell: bash
    - name: Delete Scratch Org
      if: ${{ always() }}
      run: |
        cci org scratch_delete '${{ inputs.org-name }}'
      shell: bash
